/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package EnhancedItems;

import EnhancedItems.command.GiveItem;
import EnhancedItems.listener.BlockDropItemListener;
import EnhancedItems.parser.ItemParser;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.command.PluginCommand;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.ShapedRecipe;
import org.bukkit.plugin.java.JavaPlugin;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class App extends JavaPlugin {
    private static JavaPlugin plugin;

    public static JavaPlugin getPlugin(){ return plugin; }

    @Override
    public void onEnable(){
        plugin = this;
        getServer().getPluginManager().registerEvents(new BlockDropItemListener(), this);

        createItemFiles();
        registerItemRecipes();

        PluginCommand giveItemCommand = getCommand("giveitem");
        if(giveItemCommand != null) giveItemCommand.setExecutor(new GiveItem());
    }

    private void createItemFiles(){
        File dataFolder = this.getDataFolder();
        new File(dataFolder + "/item/").mkdirs();

        try (ZipInputStream zip = new ZipInputStream(App.class.getProtectionDomain().getCodeSource().getLocation().openStream())){
            ZipEntry entry;
            while(( entry = zip.getNextEntry() ) != null){
                String entryPath = String.format("/%s", entry.getName());
                File targetFile = new File(dataFolder + entryPath);
                if(targetFile.isFile()) continue;

                if(entryPath.startsWith("/item/") &&  entryPath.endsWith(".json")) {
                    InputStream initialStream = App.class.getResourceAsStream(entryPath);
                    if(initialStream == null) continue;
                    byte[] buffer = new byte[initialStream.available()];
                    if(initialStream.read(buffer) < 1) continue;

                    OutputStream outputStream = new FileOutputStream(targetFile);
                    outputStream.write(buffer);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @SuppressWarnings("unchecked")
    private void registerItemRecipes(){
        File itemDir = new File(this.getDataFolder() + "/item/");
        File[] items;
        if(!itemDir.isDirectory() || (items = itemDir.listFiles()) == null)
            return;

        try {
            for (File itemFile : items) {
                Object jsonObject = new JSONParser().parse(new FileReader(itemFile));
                JSONObject itemJson = (JSONObject) jsonObject;

                Map itemSection = (Map) itemJson.get("ITEM");
                if (itemSection == null) continue;

                Map<String, String> ingredients = (Map) itemSection.get("ingredients");
                JSONArray recipe = (JSONArray) itemSection.get("recipe");

                String itemName = ((String) itemSection.get("name")).trim()
                        .toLowerCase().replaceAll("\\s", "_");

                ItemStack item = ItemParser.parseItem(itemName);
                if(item == null) continue;

                if (ingredients != null && recipe != null) {
                    ShapedRecipe shapedRecipe = new ShapedRecipe(
                            new NamespacedKey(App.getPlugin(), itemName)
                            , item
                    );

                    List<String> recipeLine = new ArrayList<String>(recipe);
                    shapedRecipe.shape(recipeLine.toArray(new String[0]));

                    for (String key : ingredients.keySet())
                        shapedRecipe.setIngredient(key.charAt(0), Material.valueOf(ingredients.get(key)));

                    Bukkit.addRecipe(shapedRecipe);
                    System.out.println("bruh");
                }
            }
        }catch (IOException | ParseException e){
            e.printStackTrace();
        }
    }
}
