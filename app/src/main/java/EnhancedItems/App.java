/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package EnhancedItems;

import EnhancedItems.command.GiveItem;
import EnhancedItems.file.PluginFiles;
import EnhancedItems.listener.BlockDropItemListener;
import EnhancedItems.listener.PlayerArmorChangeListener;
import EnhancedItems.parser.ItemParser;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.command.PluginCommand;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.ShapedRecipe;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;

public class App extends JavaPlugin {
    private static JavaPlugin plugin;

    public static JavaPlugin getPlugin(){ return plugin; }

    @Override
    public void onEnable(){
        plugin = this;
        PluginManager pluginManager = getServer().getPluginManager();
        pluginManager.registerEvents(new BlockDropItemListener(), this);
        pluginManager.registerEvents(new PlayerArmorChangeListener(), this);

        PluginFiles.init();
        registerItemRecipes();

        String giveItem = "giveitem";
        PluginCommand giveItemCommand = getCommand(giveItem);
        if(giveItemCommand != null) giveItemCommand.setExecutor(new GiveItem());
        else Bukkit.getLogger().log(Level.WARNING
                , String.format("The command %s wasn't found. Check your plugin.yml", giveItem));
    }

    @SuppressWarnings({"unchecked", "rawtypes"})
    private void registerItemRecipes(){
        File[] items = PluginFiles.getItemFiles();

        try {
            for (File itemFile : items) {
                Object jsonObject = new JSONParser().parse(new FileReader(itemFile));
                JSONObject itemJson = (JSONObject) jsonObject;

                Map itemSection = (Map) itemJson.get("ITEM");
                if (itemSection == null) continue;

                Map<String, String> ingredients = (Map) itemSection.get("ingredients");
                JSONArray recipe = (JSONArray) itemSection.get("recipe");

                String itemName = ((String) itemSection.get("name")).trim()
                        .toLowerCase().replaceAll("\\s", "_");

                ItemStack item = ItemParser.parseItem(itemName);
                if(item == null) continue;

                if (ingredients != null && recipe != null) {
                    ShapedRecipe shapedRecipe = new ShapedRecipe(
                            new NamespacedKey(App.getPlugin(), itemName)
                            , item
                    );

                    List<String> recipeLine = new ArrayList<String>(recipe);
                    shapedRecipe.shape(recipeLine.toArray(new String[0]));

                    for (String key : ingredients.keySet())
                        shapedRecipe.setIngredient(key.charAt(0), Material.valueOf(ingredients.get(key)));

                    Bukkit.addRecipe(shapedRecipe);
                }
            }
        }catch (IOException | ParseException e){
            e.printStackTrace();
        }
    }
}
